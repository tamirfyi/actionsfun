# You can control deployments with github actions by
# triggering workflows after events
# configure environments to set rules before running a job
# use concurrency to control number of deployments running at a time

name: cd-workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

# ENVIRONMENTS - used to describe a general deployment target like `production`, `staging` or `development`
# environment is displayed on main page of repo if GHA deploys to it
# can use environments to require approval for a job to proceed & other governance controls

# CONCURRENCY - ensures a single job or workflow using the same concurrency group will run at a time
# use concurrency to make sure an environment only has one deployment in progress and one in pending at a time
# not connected to environment names

jobs:
  deployment:
    runs-on: ubuntu-latest
    # specifies which environment to use
    environment: development
    # specifies concurrency group so there will only be one running and one pending job/workflow in this group
    concurrency: development
    steps:
      - name: deploy
        run: echo "deploying application"3
# DEPLOYING TO CLOUD
# most cloud services provide a github action to upload some sort of app (i.e. azure/webapps-deploy)
# flow seems to go like this:
# build:
# setup runtime,
# build install & test
# upload artifact
# deploy:
# set environment (specific branch patterns will upload to different environments)
# download artifact from build job (make sure to include `needs: build`)
# deploy to cloud provider

# AWS is a bit more complicated; you need to configure AWS creditials, build tag & push image to ECR, then deploy a new ECS instance

# SECURITY HARDENING
# OpenID connect (OIDC) allows your workflows to exchange tokens directly from your cloud provider
# in order to access cloud providers, github supplies the provider with credentials (username & password) that are typically stored as secrets
#   * this requires you to create credentials in cloud provider and duplicate them in github as a secret
# OIDC allows your workflow to request short-lived access tokens directly from the provider
# your cloud provider must support OIDC
# benefits:
# - no cloud secrets
# - authentication and authorization management
# - rotating credentials
